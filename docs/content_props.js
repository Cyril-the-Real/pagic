import projectConfig from '/pagic.config.js';
var _a, _b;
export default {
    'prev': {
        "title": "Config",
        "link": "docs/config.html"
    },
    'next': {
        "title": "_layout.tsx",
        "link": "docs/layout.html"
    },
    'sidebar': [
        {
            "title": "Introduction",
            "link": "docs/introduction.html",
            "pagePath": "docs/introduction.md"
        },
        {
            "title": "Usage",
            "link": "docs/usage.html",
            "pagePath": "docs/usage.md"
        },
        {
            "title": "Config",
            "link": "docs/config.html",
            "pagePath": "docs/config.md"
        },
        {
            "title": "Content",
            "link": "docs/content.html",
            "pagePath": "docs/content.md"
        },
        {
            "title": "_layout.tsx",
            "link": "docs/layout.html",
            "pagePath": "docs/layout.md"
        },
        {
            "title": "Themes",
            "link": "docs/themes.html",
            "pagePath": "docs/themes.md"
        },
        {
            "title": "Plugins",
            "link": "docs/plugins.html",
            "pagePath": "docs/plugins.md"
        },
        {
            "title": "Deployment",
            "link": "docs/deployment.html",
            "pagePath": "docs/deployment.md"
        },
        {
            "title": "Demos",
            "link": "docs/demos.html",
            "pagePath": "docs/demos.md"
        },
        {
            "title": "Limitations",
            "link": "docs/limitations.html",
            "pagePath": "docs/limitations.md"
        }
    ],
    config: { "root": "/", ...projectConfig, ...(_b = (_a = projectConfig.i18n) === null || _a === void 0 ? void 0 : _a.overrides) === null || _b === void 0 ? void 0 : _b['en'] },
    'pagePath': "docs/content.md",
    'layoutPath': "_layout.tsx",
    'outputPath': "docs/content.html",
    'title': "Content",
    'content': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h1>Content</h1>\n<p>Pagic supports rendering <code>md/tsx</code> files into static HTML pages. The features supported by these two kind of files will be introduced below.</p>\n<h2 id="md-file">md file<a class="anchor" href="#md-file">§</a></h2>\n<p>Pagic uses <a href="https://github.com/markdown-it/markdown-it">markdown-it</a> to compile markdown files. It supports adding third-party plugins to extend the original functions.</p>\n<p>Pagic supports the following features:</p>\n<h3 id="title"><code>title</code><a class="anchor" href="#title">§</a></h3>\n<p>The first <code>&lt;h1&gt;</code> tag in the article will be extracted as the <code>title</code> of the entire page (plus the <code>title</code> in <code>pagic.config.ts</code> as the suffix).</p>\n<p>If there is no <code>&lt;h1&gt;</code> tag in the article, the <code>title</code> in <code>pagic.config.ts</code> will be used as the <code>title</code> of the page.</p>\n<h3 id="toc"><code>toc</code><a class="anchor" href="#toc">§</a></h3>\n<p>All the <code>&lt;h2&gt;</code> and <code>&lt;h3&gt;</code> tags in the article will be extracted as the table of contents of the page.</p>\n<p>If there is no <code>&lt;h2&gt;</code> or <code>&lt;h3&gt;</code> in the article, then <code>toc</code> is <code>undefined</code>.</p>\n<h3 id="anchor-in-title">Anchor in title<a class="anchor" href="#anchor-in-title">§</a></h3>\n<p>All the <code>&lt;h2&gt;</code>, <code>&lt;h3&gt;</code>, <code>&lt;h4&gt;</code>, <code>&lt;h5&gt;</code>, <code>&lt;h6&gt;</code> tags in the article will be inserted into a clickable anchor <code>§</code>.</p>\n<h3 id="link-replacement">Link replacement<a class="anchor" href="#link-replacement">§</a></h3>\n<p>If the link in the article ends with <code>.md</code>, it will be replaced with <code>.html</code> during the build process, for example:</p>\n<pre class="language-md"><code class="language-md"><span class="token url">[<span class="token content">Config</span>](./config.md)</span>\n</code></pre>\n<p>Will be constructed as:</p>\n<pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./config.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>\n</code></pre>\n<p>The actual build result: <a href="./config.html">Config</a>, you might as well click to see the jump effect.</p>\n<p>Why is it designed like this?</p>\n<p>Because such a link not only supports click to jump in the generated page, but also supports click to jump in the markdown preview of GitHub, but also supports <code>cmd/ctrl + click</code> jump in VSCode (or other editors).</p>\n<p>Try it in <a href="https://github.com/xcatliu/pagic/blob/master/site/docs/content.md#link-replacement">GitHub version of this page</a>.</p>\n<p>It should be noted that not only the suffix of <code>README.md</code> in the link will be replaced with <code>.html</code>, the path will also be replaced with <code>index</code>:</p>\n<pre class="language-md"><code class="language-md"><span class="token url">[<span class="token content">Homepage</span>](/README.md)</span>\n</code></pre>\n<p>Will be constructed as:</p>\n<pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/index.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Homepage<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>\n</code></pre>\n<p>The actual build result: <a href="/index.html">Homepage</a>, you might as well click to see the jump effect.</p>\n<p>In addition, if the link starts with <code>http://</code> or <code>https://</code>, it means that it is an external link, and no matter what the suffix is, it will not be replaced.</p>\n<h3 id="front-matter">Front matter<a class="anchor" href="#front-matter">§</a></h3>\n<p>frontMatter is allowed to be set at the top of the markdown file, which will be passed as <code>props</code> to <code>_layout.tsx</code>. Note that it has the highest priority and will override any <code>props</code> added by plugins, such as:</p>\n<p>Set <code>outputPath</code> to specify the path of the output page (the output path is the file path by default):</p>\n<pre class="language-md"><code class="language-md"><span class="token hr punctuation">---</span>\n<span class="highlighted-line"><span class="token title important">outputPath: foo/bar.html</span></span><span><span class="token punctuation">---</span></span>\n\n<span class="token title important"><span class="token punctuation">#</span> Content</span>\n\n...\n</code></pre><p>Set <code>layoutPath</code> to specify the template file used on this page:</p>\n<pre class="language-md"><code class="language-md"><span class="token hr punctuation">---</span>\n<span class="highlighted-line"><span class="token title important">layoutPath: blog/_layout.tsx</span></span><span><span class="token punctuation">---</span></span>\n\n<span class="token title important"><span class="token punctuation">#</span> Content</span>\n\n...\n</code></pre><p>Set <code>toc</code> to <code>null</code> to disable the table of content of this page:</p>\n<pre class="language-md"><code class="language-md"><span class="token hr punctuation">---</span>\n<span class="highlighted-line"><span class="token title important">toc: null</span></span><span><span class="token punctuation">---</span></span>\n\n<span class="token title important"><span class="token punctuation">#</span> Content</span>\n\n...\n</code></pre><p>Set <code>prev</code> or <code>next</code> to specify the path of the previous page and the next page (need to cooperate with the <code>prev_next</code> plugin):</p>\n<pre class="language-md"><code class="language-md"><span class="token hr punctuation">---</span>\n<span class="highlighted-line"><span class="token title important">prev: README.md</span></span><span><span class="token punctuation">---</span></span>\n\n<span class="token title important"><span class="token punctuation">#</span> Content</span>\n\n...\n</code></pre><p>The setting of the frontMatter is very flexible, with various plugins or custom <code>_layout.tsx</code>, various effects can be achieved.</p>\n<h3 id="limitations">Limitations<a class="anchor" href="#limitations">§</a></h3>\n<p>At present, Pagic\'s markdown parsing still has some limitations, which is also the direction for future improvement:</p>\n<ul>\n<li>The option to configure <code>markdown-it</code> is not supported</li>\n<li>Does not support advanced grammar such as scientific formulas and flowcharts</li>\n<li>Does not support embedded jsx</li>\n</ul>\n<h2 id="tsx-file">tsx file<a class="anchor" href="#tsx-file">§</a></h2>\n<p>Rendering tsx files into static HTML pages is one of Pagic\'s features. With the programmability of React components, the capabilities of static websites are greatly expanded.</p>\n<h3 id="basic-usage">Basic usage<a class="anchor" href="#basic-usage">§</a></h3>\n<p>Any <code>tsx</code> file that does not start with <code>_</code> will be treated as a <code>tsx</code> page file.</p>\n<p>Let\'s create a <code>hello.tsx</code> file in the previous <code>site</code> project:</p>\n<pre class="language-autoit"><code class="language-autoit">site<span class="token operator">/</span>\n├── pagic<span class="token punctuation">.</span>config<span class="token punctuation">.</span>ts\n<span class="highlighted-line">├── hello<span class="token punctuation">.</span>tsx</span>└── README<span class="token punctuation">.</span>md\n</code></pre><p>Its content is:</p>\n<pre class="language-tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token imports"><span class="token punctuation">{</span> <span class="token maybe-class-name">React</span> <span class="token punctuation">}</span></span> <span class="token keyword">from</span> <span class="token string">\'<a class="token url-link" href="https://deno.land/x/pagic/mod.ts">https://deno.land/x/pagic/mod.ts</a>\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">Hello</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">Hello world</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token maybe-class-name">Hello</span><span class="token punctuation">;</span>\n</code></pre>\n<p>Next we run:</p>\n<pre class="language-bash"><code class="language-bash">pagic build --serve\n</code></pre>\n<p>Then open <a href="http://127.0.0.1:8000/hello.html">http://127.0.0.1:8000/hello.html</a> and you can see that <code>Hello world</code> is displayed on the page.</p>\n<p>At the same time, there is an additional file <code>hello.html</code> in the <code>dist</code> directory:</p>\n<pre class="language-autoit"><code class="language-autoit">site<span class="token operator">/</span>\n|── dist    # Output directory\n<span class="highlighted-line">| |── hello<span class="token punctuation">.</span>html</span>| └── index<span class="token punctuation">.</span>html\n├── pagic<span class="token punctuation">.</span>config<span class="token punctuation">.</span>ts\n<span class="highlighted-line">├── hello<span class="token punctuation">.</span>tsx</span>└── README<span class="token punctuation">.</span>md\n</code></pre><blockquote>\n<p>The <strong>default export</strong> (<code>export default</code>) in <code>hello.tsx</code> will be regarded as the content of the page.</p>\n</blockquote>\n<h3 id="logic-script">Logic script<a class="anchor" href="#logic-script">§</a></h3>\n<p>Pagic will not only execute the logic in the <code>tsx</code> file when building the page, but also run in the browser.</p>\n<p>For example, we can use <code>React.setState</code> to implement a counter page:</p>\n<pre class="language-tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token imports"><span class="token punctuation">{</span> <span class="token maybe-class-name">React</span> <span class="token punctuation">}</span></span> <span class="token keyword">from</span> <span class="token string">\'<a class="token url-link" href="https://deno.land/x/pagic/mod.ts">https://deno.land/x/pagic/mod.ts</a>\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">Hello</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n<span class="highlighted-line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token maybe-class-name">React</span><span class="token punctuation">.</span><span class="token method function property-access">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">Hello world</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text"></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">Count: </span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text"></span>\n<span class="highlighted-line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">Count +1</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text"></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token maybe-class-name">Hello</span><span class="token punctuation">;</span>\n</code></pre><p>Visit <a href="/hello.html">/hello.html</a> to view the actual rendering results.</p>\n<blockquote>\n<p>Due to the limitation of <code>react.d.ts</code>, you must use <code>React.xxx</code> when using the sub-methods of <code>React</code>, instead of directly <code>import React, {useState} ...</code>.</p>\n</blockquote>\n<h3 id="componentization">Componentization<a class="anchor" href="#componentization">§</a></h3>\n<p>Componentization is one of the important features of React. We can reuse code by splitting the <code>tsx</code> page into sub-components. However, in Pagic, due to the need to support rendering of <code>tsx</code> files as pages, we need to make a convention for sub-components, that is, starting with <code>_</code> are sub-components:</p>\n<pre class="language-autoit"><code class="language-autoit">site<span class="token operator">/</span>\n|── dist    # Output directory\n| └── hello<span class="token punctuation">.</span>html\n<span class="highlighted-line">├── _count<span class="token punctuation">.</span>tsx</span>├── hello<span class="token punctuation">.</span>tsx\n└── pagic<span class="token punctuation">.</span>config<span class="token punctuation">.</span>ts\n</code></pre><p>In the above example, <code>hello.tsx</code> will be constructed as <code>dist/hello.html</code>, and <code>_count.tsx</code> will not be constructed as a page because it starts with <code>_</code>. In this way, we can split the <code>Count</code> component into the <code>_count.tsx</code> file, and then import it in <code>hello.tsx</code>:</p>\n<pre class="language-tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token imports"><span class="token punctuation">{</span> <span class="token maybe-class-name">React</span> <span class="token punctuation">}</span></span> <span class="token keyword">from</span> <span class="token string">\'<a class="token url-link" href="https://deno.land/x/pagic/mod.ts">https://deno.land/x/pagic/mod.ts</a>\'</span><span class="token punctuation">;</span>\n\n<span class="highlighted-line"><span class="token keyword">import</span> <span class="token imports"><span class="token maybe-class-name">Count</span></span> <span class="token keyword">from</span> <span class="token string">\'./_count.tsx\'</span><span class="token punctuation">;</span></span>\n<span class="token keyword">const</span> <span class="token function-variable function">Hello</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">(</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">Hello world</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text"></span>\n<span class="highlighted-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Count</span></span> <span class="token punctuation">/></span></span><span class="token plain-text"></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">></span></span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token maybe-class-name">Hello</span><span class="token punctuation">;</span>\n</code></pre><h3 id="front-matter-1">Front matter<a class="anchor" href="#front-matter-1">§</a></h3>\n<p>Similar to <code>md</code> files, <code>tsx</code> files also support frontMatter, which is achieved by exporting a <code>frontMatter</code> object:</p>\n<pre class="language-tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token imports"><span class="token punctuation">{</span> <span class="token maybe-class-name">React</span> <span class="token punctuation">}</span></span> <span class="token keyword">from</span> <span class="token string">\'<a class="token url-link" href="https://deno.land/x/pagic/mod.ts">https://deno.land/x/pagic/mod.ts</a>\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">Hello</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">Hello world</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token maybe-class-name">Hello</span><span class="token punctuation">;</span>\n\n<span class="highlighted-line"><span class="token keyword">export</span> <span class="token keyword">const</span> frontMatter <span class="token operator">=</span> <span class="token punctuation">{</span></span><span class="highlighted-line">  outputPath<span class="token operator">:</span> <span class="token string">\'foo/bar.html\'</span></span><span class="highlighted-line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span></code></pre><h3 id="limitations-1">Limitations<a class="anchor" href="#limitations-1">§</a></h3>\n<p>There are also some limitations when using <code>tsx</code> files, which are also the direction for future improvements:</p>\n<ul>\n<li>Does not support code highlighting</li>\n<li>Does not support embedded markdown</li>\n<li>Does not support automatic directory generation</li>\n</ul>'
        } }),
    'contentTitle': React.createElement("h1", { key: "0" }, "Content"),
    'contentBody': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<p>Pagic supports rendering <code>md/tsx</code> files into static HTML pages. The features supported by these two kind of files will be introduced below.</p>\n<h2 id="md-file">md file<a class="anchor" href="#md-file">§</a></h2>\n<p>Pagic uses <a href="https://github.com/markdown-it/markdown-it">markdown-it</a> to compile markdown files. It supports adding third-party plugins to extend the original functions.</p>\n<p>Pagic supports the following features:</p>\n<h3 id="title"><code>title</code><a class="anchor" href="#title">§</a></h3>\n<p>The first <code>&lt;h1&gt;</code> tag in the article will be extracted as the <code>title</code> of the entire page (plus the <code>title</code> in <code>pagic.config.ts</code> as the suffix).</p>\n<p>If there is no <code>&lt;h1&gt;</code> tag in the article, the <code>title</code> in <code>pagic.config.ts</code> will be used as the <code>title</code> of the page.</p>\n<h3 id="toc"><code>toc</code><a class="anchor" href="#toc">§</a></h3>\n<p>All the <code>&lt;h2&gt;</code> and <code>&lt;h3&gt;</code> tags in the article will be extracted as the table of contents of the page.</p>\n<p>If there is no <code>&lt;h2&gt;</code> or <code>&lt;h3&gt;</code> in the article, then <code>toc</code> is <code>undefined</code>.</p>\n<h3 id="anchor-in-title">Anchor in title<a class="anchor" href="#anchor-in-title">§</a></h3>\n<p>All the <code>&lt;h2&gt;</code>, <code>&lt;h3&gt;</code>, <code>&lt;h4&gt;</code>, <code>&lt;h5&gt;</code>, <code>&lt;h6&gt;</code> tags in the article will be inserted into a clickable anchor <code>§</code>.</p>\n<h3 id="link-replacement">Link replacement<a class="anchor" href="#link-replacement">§</a></h3>\n<p>If the link in the article ends with <code>.md</code>, it will be replaced with <code>.html</code> during the build process, for example:</p>\n<pre class="language-md"><code class="language-md"><span class="token url">[<span class="token content">Config</span>](./config.md)</span>\n</code></pre>\n<p>Will be constructed as:</p>\n<pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./config.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>\n</code></pre>\n<p>The actual build result: <a href="./config.html">Config</a>, you might as well click to see the jump effect.</p>\n<p>Why is it designed like this?</p>\n<p>Because such a link not only supports click to jump in the generated page, but also supports click to jump in the markdown preview of GitHub, but also supports <code>cmd/ctrl + click</code> jump in VSCode (or other editors).</p>\n<p>Try it in <a href="https://github.com/xcatliu/pagic/blob/master/site/docs/content.md#link-replacement">GitHub version of this page</a>.</p>\n<p>It should be noted that not only the suffix of <code>README.md</code> in the link will be replaced with <code>.html</code>, the path will also be replaced with <code>index</code>:</p>\n<pre class="language-md"><code class="language-md"><span class="token url">[<span class="token content">Homepage</span>](/README.md)</span>\n</code></pre>\n<p>Will be constructed as:</p>\n<pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/index.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Homepage<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>\n</code></pre>\n<p>The actual build result: <a href="/index.html">Homepage</a>, you might as well click to see the jump effect.</p>\n<p>In addition, if the link starts with <code>http://</code> or <code>https://</code>, it means that it is an external link, and no matter what the suffix is, it will not be replaced.</p>\n<h3 id="front-matter">Front matter<a class="anchor" href="#front-matter">§</a></h3>\n<p>frontMatter is allowed to be set at the top of the markdown file, which will be passed as <code>props</code> to <code>_layout.tsx</code>. Note that it has the highest priority and will override any <code>props</code> added by plugins, such as:</p>\n<p>Set <code>outputPath</code> to specify the path of the output page (the output path is the file path by default):</p>\n<pre class="language-md"><code class="language-md"><span class="token hr punctuation">---</span>\n<span class="highlighted-line"><span class="token title important">outputPath: foo/bar.html</span></span><span><span class="token punctuation">---</span></span>\n\n<span class="token title important"><span class="token punctuation">#</span> Content</span>\n\n...\n</code></pre><p>Set <code>layoutPath</code> to specify the template file used on this page:</p>\n<pre class="language-md"><code class="language-md"><span class="token hr punctuation">---</span>\n<span class="highlighted-line"><span class="token title important">layoutPath: blog/_layout.tsx</span></span><span><span class="token punctuation">---</span></span>\n\n<span class="token title important"><span class="token punctuation">#</span> Content</span>\n\n...\n</code></pre><p>Set <code>toc</code> to <code>null</code> to disable the table of content of this page:</p>\n<pre class="language-md"><code class="language-md"><span class="token hr punctuation">---</span>\n<span class="highlighted-line"><span class="token title important">toc: null</span></span><span><span class="token punctuation">---</span></span>\n\n<span class="token title important"><span class="token punctuation">#</span> Content</span>\n\n...\n</code></pre><p>Set <code>prev</code> or <code>next</code> to specify the path of the previous page and the next page (need to cooperate with the <code>prev_next</code> plugin):</p>\n<pre class="language-md"><code class="language-md"><span class="token hr punctuation">---</span>\n<span class="highlighted-line"><span class="token title important">prev: README.md</span></span><span><span class="token punctuation">---</span></span>\n\n<span class="token title important"><span class="token punctuation">#</span> Content</span>\n\n...\n</code></pre><p>The setting of the frontMatter is very flexible, with various plugins or custom <code>_layout.tsx</code>, various effects can be achieved.</p>\n<h3 id="limitations">Limitations<a class="anchor" href="#limitations">§</a></h3>\n<p>At present, Pagic\'s markdown parsing still has some limitations, which is also the direction for future improvement:</p>\n<ul>\n<li>The option to configure <code>markdown-it</code> is not supported</li>\n<li>Does not support advanced grammar such as scientific formulas and flowcharts</li>\n<li>Does not support embedded jsx</li>\n</ul>\n<h2 id="tsx-file">tsx file<a class="anchor" href="#tsx-file">§</a></h2>\n<p>Rendering tsx files into static HTML pages is one of Pagic\'s features. With the programmability of React components, the capabilities of static websites are greatly expanded.</p>\n<h3 id="basic-usage">Basic usage<a class="anchor" href="#basic-usage">§</a></h3>\n<p>Any <code>tsx</code> file that does not start with <code>_</code> will be treated as a <code>tsx</code> page file.</p>\n<p>Let\'s create a <code>hello.tsx</code> file in the previous <code>site</code> project:</p>\n<pre class="language-autoit"><code class="language-autoit">site<span class="token operator">/</span>\n├── pagic<span class="token punctuation">.</span>config<span class="token punctuation">.</span>ts\n<span class="highlighted-line">├── hello<span class="token punctuation">.</span>tsx</span>└── README<span class="token punctuation">.</span>md\n</code></pre><p>Its content is:</p>\n<pre class="language-tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token imports"><span class="token punctuation">{</span> <span class="token maybe-class-name">React</span> <span class="token punctuation">}</span></span> <span class="token keyword">from</span> <span class="token string">\'<a class="token url-link" href="https://deno.land/x/pagic/mod.ts">https://deno.land/x/pagic/mod.ts</a>\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">Hello</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">Hello world</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token maybe-class-name">Hello</span><span class="token punctuation">;</span>\n</code></pre>\n<p>Next we run:</p>\n<pre class="language-bash"><code class="language-bash">pagic build --serve\n</code></pre>\n<p>Then open <a href="http://127.0.0.1:8000/hello.html">http://127.0.0.1:8000/hello.html</a> and you can see that <code>Hello world</code> is displayed on the page.</p>\n<p>At the same time, there is an additional file <code>hello.html</code> in the <code>dist</code> directory:</p>\n<pre class="language-autoit"><code class="language-autoit">site<span class="token operator">/</span>\n|── dist    # Output directory\n<span class="highlighted-line">| |── hello<span class="token punctuation">.</span>html</span>| └── index<span class="token punctuation">.</span>html\n├── pagic<span class="token punctuation">.</span>config<span class="token punctuation">.</span>ts\n<span class="highlighted-line">├── hello<span class="token punctuation">.</span>tsx</span>└── README<span class="token punctuation">.</span>md\n</code></pre><blockquote>\n<p>The <strong>default export</strong> (<code>export default</code>) in <code>hello.tsx</code> will be regarded as the content of the page.</p>\n</blockquote>\n<h3 id="logic-script">Logic script<a class="anchor" href="#logic-script">§</a></h3>\n<p>Pagic will not only execute the logic in the <code>tsx</code> file when building the page, but also run in the browser.</p>\n<p>For example, we can use <code>React.setState</code> to implement a counter page:</p>\n<pre class="language-tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token imports"><span class="token punctuation">{</span> <span class="token maybe-class-name">React</span> <span class="token punctuation">}</span></span> <span class="token keyword">from</span> <span class="token string">\'<a class="token url-link" href="https://deno.land/x/pagic/mod.ts">https://deno.land/x/pagic/mod.ts</a>\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">Hello</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n<span class="highlighted-line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token maybe-class-name">React</span><span class="token punctuation">.</span><span class="token method function property-access">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">Hello world</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text"></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">Count: </span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text"></span>\n<span class="highlighted-line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">Count +1</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text"></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token maybe-class-name">Hello</span><span class="token punctuation">;</span>\n</code></pre><p>Visit <a href="/hello.html">/hello.html</a> to view the actual rendering results.</p>\n<blockquote>\n<p>Due to the limitation of <code>react.d.ts</code>, you must use <code>React.xxx</code> when using the sub-methods of <code>React</code>, instead of directly <code>import React, {useState} ...</code>.</p>\n</blockquote>\n<h3 id="componentization">Componentization<a class="anchor" href="#componentization">§</a></h3>\n<p>Componentization is one of the important features of React. We can reuse code by splitting the <code>tsx</code> page into sub-components. However, in Pagic, due to the need to support rendering of <code>tsx</code> files as pages, we need to make a convention for sub-components, that is, starting with <code>_</code> are sub-components:</p>\n<pre class="language-autoit"><code class="language-autoit">site<span class="token operator">/</span>\n|── dist    # Output directory\n| └── hello<span class="token punctuation">.</span>html\n<span class="highlighted-line">├── _count<span class="token punctuation">.</span>tsx</span>├── hello<span class="token punctuation">.</span>tsx\n└── pagic<span class="token punctuation">.</span>config<span class="token punctuation">.</span>ts\n</code></pre><p>In the above example, <code>hello.tsx</code> will be constructed as <code>dist/hello.html</code>, and <code>_count.tsx</code> will not be constructed as a page because it starts with <code>_</code>. In this way, we can split the <code>Count</code> component into the <code>_count.tsx</code> file, and then import it in <code>hello.tsx</code>:</p>\n<pre class="language-tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token imports"><span class="token punctuation">{</span> <span class="token maybe-class-name">React</span> <span class="token punctuation">}</span></span> <span class="token keyword">from</span> <span class="token string">\'<a class="token url-link" href="https://deno.land/x/pagic/mod.ts">https://deno.land/x/pagic/mod.ts</a>\'</span><span class="token punctuation">;</span>\n\n<span class="highlighted-line"><span class="token keyword">import</span> <span class="token imports"><span class="token maybe-class-name">Count</span></span> <span class="token keyword">from</span> <span class="token string">\'./_count.tsx\'</span><span class="token punctuation">;</span></span>\n<span class="token keyword">const</span> <span class="token function-variable function">Hello</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">(</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">Hello world</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text"></span>\n<span class="highlighted-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Count</span></span> <span class="token punctuation">/></span></span><span class="token plain-text"></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">></span></span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token maybe-class-name">Hello</span><span class="token punctuation">;</span>\n</code></pre><h3 id="front-matter-1">Front matter<a class="anchor" href="#front-matter-1">§</a></h3>\n<p>Similar to <code>md</code> files, <code>tsx</code> files also support frontMatter, which is achieved by exporting a <code>frontMatter</code> object:</p>\n<pre class="language-tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token imports"><span class="token punctuation">{</span> <span class="token maybe-class-name">React</span> <span class="token punctuation">}</span></span> <span class="token keyword">from</span> <span class="token string">\'<a class="token url-link" href="https://deno.land/x/pagic/mod.ts">https://deno.land/x/pagic/mod.ts</a>\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">Hello</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">Hello world</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token maybe-class-name">Hello</span><span class="token punctuation">;</span>\n\n<span class="highlighted-line"><span class="token keyword">export</span> <span class="token keyword">const</span> frontMatter <span class="token operator">=</span> <span class="token punctuation">{</span></span><span class="highlighted-line">  outputPath<span class="token operator">:</span> <span class="token string">\'foo/bar.html\'</span></span><span class="highlighted-line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span></code></pre><h3 id="limitations-1">Limitations<a class="anchor" href="#limitations-1">§</a></h3>\n<p>There are also some limitations when using <code>tsx</code> files, which are also the direction for future improvements:</p>\n<ul>\n<li>Does not support code highlighting</li>\n<li>Does not support embedded markdown</li>\n<li>Does not support automatic directory generation</li>\n</ul>'
        } }),
    'head': React.createElement(React.Fragment, null,
        React.createElement("script", { src: "/i18n.js", type: "module" })),
    'script': React.createElement(React.Fragment, null,
        React.createElement("script", { src: "https://cdn.pagic.org/react@16.13.1/umd/react.production.min.js" }),
        React.createElement("script", { src: "https://cdn.pagic.org/react-dom@16.13.1/umd/react-dom.production.min.js" }),
        React.createElement("script", { src: "/index.js", type: "module" })),
    'toc': React.createElement("aside", { dangerouslySetInnerHTML: {
            __html: '<nav class="toc"><ol><li><a href="#md-file">md file</a><ol><li><a href="#title">title</a></li><li><a href="#toc">toc</a></li><li><a href="#anchor-in-title">Anchor in title</a></li><li><a href="#link-replacement">Link replacement</a></li><li><a href="#front-matter">Front matter</a></li><li><a href="#limitations">Limitations</a></li></ol></li><li><a href="#tsx-file">tsx file</a><ol><li><a href="#basic-usage">Basic usage</a></li><li><a href="#logic-script">Logic script</a></li><li><a href="#componentization">Componentization</a></li><li><a href="#front-matter-1">Front matter</a></li><li><a href="#limitations-1">Limitations</a></li></ol></li></ol></nav>'
        } }),
    'language': {
        "code": "en",
        "name": "English",
        "path": ""
    },
    'date': "2020-10-12T13:23:18.000Z",
    'updated': null,
    'author': "xcatliu",
    'contributors': [
        "xcatliu"
    ],
    'blog': {
        "isPost": false,
        "isPosts": false,
        "posts": [
            {
                "pagePath": "blog/design_pagic_config_ts.md",
                "title": "Design pagic.config.ts",
                "link": "blog/design_pagic_config_ts.html",
                "date": "2020-07-12T00:00:00.000Z",
                "updated": null
            }
        ]
    }
};
