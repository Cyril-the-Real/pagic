import projectConfig from '/pagic.config.js';
export default {
    'prev': {
        "text": "配置文件",
        "link": "docs/config.html"
    },
    'next': {
        "text": "页面内容",
        "link": "docs/content.html"
    },
    'sidebar': [
        {
            "text": "介绍",
            "link": "docs/introduction.html",
            "pagePath": "docs/introduction.md"
        },
        {
            "text": "基本用法",
            "link": "docs/usage.html",
            "pagePath": "docs/usage.md"
        },
        {
            "text": "配置文件",
            "link": "docs/config.html",
            "pagePath": "docs/config.md"
        },
        {
            "text": "_layout.tsx",
            "link": "docs/layout.html",
            "pagePath": "docs/layout.md"
        },
        {
            "text": "页面内容",
            "link": "docs/content.html",
            "pagePath": "docs/content.md"
        },
        {
            "text": "主题",
            "link": "docs/themes.html",
            "pagePath": "docs/themes.md"
        },
        {
            "text": "插件",
            "link": "docs/plugins.html",
            "pagePath": "docs/plugins.md"
        },
        {
            "text": "部署",
            "link": "docs/deployment.html",
            "pagePath": "docs/deployment.md"
        }
    ],
    config: { "root": "/", ...projectConfig },
    'pagePath': "docs/layout.md",
    'layoutPath': "_layout.tsx",
    'outputPath': "docs/layout.html",
    'title': "_layout.tsx",
    'content': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h1><code>_layout.tsx</code></h1>\n<p><code>_layout.tsx</code> 是 Pagic 的核心理念之一。</p>\n<h2 id="%E4%BB%80%E4%B9%88%E6%98%AF-_layout.tsx">什么是 <code>_layout.tsx</code><a class="anchor" href="#%E4%BB%80%E4%B9%88%E6%98%AF-_layout.tsx">§</a></h2>\n<p><code>_layout.tsx</code> 可以理解为 Pagic 在渲染时的模版文件，所有页面文件（<code>md/tsx</code>）在渲染时都会以 <code>_layout.tsx</code> 为模版。</p>\n<p>我们在上一章的 <code>site</code> 项目中创建一个 <code>_layout.tsx</code>：</p>\n<pre class="language-autoit"><code class="language-autoit">site<span class="token operator">/</span>\n├── _layout<span class="token punctuation">.</span>tsx\n├── pagic<span class="token punctuation">.</span>config<span class="token punctuation">.</span>ts\n└── README<span class="token punctuation">.</span>md\n</code></pre>\n<p>其中 <code>_layout.tsx</code> 的内容如下：</p>\n<pre class="language-tsx"><code class="language-tsx"><span class="token comment">// @deno-types="<a class="token url-link" href="https://deno.land/x/pagic@v0.8.6/src/types/react/v16.13.1/react.d.ts">https://deno.land/x/pagic@v0.8.6/src/types/react/v16.13.1/react.d.ts</a>"</span>\n<span class="token keyword">import</span> <span class="token maybe-class-name">React</span> <span class="token keyword">from</span> <span class="token string">\'<a class="token url-link" href="https://dev.jspm.io/react@16.13.1">https://dev.jspm.io/react@16.13.1</a>\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token maybe-class-name">PagicLayout</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'<a class="token url-link" href="https://deno.land/x/pagic@v0.8.6/mod.ts">https://deno.land/x/pagic@v0.8.6/mod.ts</a>\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token maybe-class-name">Layout</span><span class="token operator">:</span> <span class="token function-variable function"><span class="token maybe-class-name">PagicLayout</span></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> title<span class="token punctuation">,</span> content <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">(</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>title<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charSet</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token punctuation">{</span>content<span class="token punctuation">}</span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">Custom _layout.tsx</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token plain-text">\n  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token maybe-class-name">Layout</span><span class="token punctuation">;</span>\n</code></pre>\n<p>接下来我们运行：</p>\n<pre class="language-bash"><code class="language-bash">pagic build --serve\n</code></pre>\n<p>然后打开 http://127.0.0.1:8000/，可以看到页面中除了有标题 <code>Hello world</code> 之外，还有一个段落 <code>Custom _layout.tsx</code>，这说明此页面是用 <code>_layout.tsx</code> 作为模版渲染出来的。</p>\n<p>为什么在上一章中不需要 <code>_layout.tsx</code> 也可以构建出页面呢？</p>\n<p>那是因为 Pagic 默认会使用 default 主题中的 <code>_layout.tsx</code> 文件作为模版。当我们创建一个自己的 <code>_layout.tsx</code> 时，就会覆盖掉主题中的 <code>_layout.tsx</code> 了。</p>\n<h2 id="%E5%AD%90%E9%A1%B5%E9%9D%A2%E5%92%8C%E5%AD%90%E6%A8%A1%E7%89%88">子页面和子模版<a class="anchor" href="#%E5%AD%90%E9%A1%B5%E9%9D%A2%E5%92%8C%E5%AD%90%E6%A8%A1%E7%89%88">§</a></h2>\n<p><code>_layout.tsx</code> 的设计是符合直觉的，当我们创建子目录时，其中的页面会优先使用该目录下的 <code>_layout.tsx</code>，只有当子目录下没有 <code>_layout.tsx</code> 时才会向上级目录查找，直到找到 <code>_layout.tsx</code> 为止：</p>\n<pre class="language-autoit"><code class="language-autoit">site<span class="token operator">/</span>\n├── _layout<span class="token punctuation">.</span>tsx\n├── pagic<span class="token punctuation">.</span>config<span class="token punctuation">.</span>ts\n|── README<span class="token punctuation">.</span>md\n└── foo\n    ├── README<span class="token punctuation">.</span>md\n    └── bar\n        ├── _layout<span class="token punctuation">.</span>tsx\n        └── README<span class="token punctuation">.</span>md\n</code></pre>\n<p>在上面的例子中，<code>site/foo/bar/README.md</code> 会使用同级目录下的 <code>site/foo/bar/_layout.tsx</code> 作为模版，而 <code>site/foo/README.md</code> 则会使用 <code>site/_layout.tsx</code> 作为模版。</p>\n<blockquote>\n<p>通过 frontMatter 可以跳过此规则，强制指定一个模版。</p>\n</blockquote>\n<h2 id="%E6%A8%A1%E7%89%88%E7%BB%84%E4%BB%B6">模版组件<a class="anchor" href="#%E6%A8%A1%E7%89%88%E7%BB%84%E4%BB%B6">§</a></h2>\n<p>组件化是 React 的重要特性之一，我们当然可以通过拆分 <code>_layout.tsx</code> 为一个个小组件来复用代码。不过在 Pagic 中，由于需要支持 <code>tsx</code> 文件渲染为页面，所以我们需要对模版组件做一个约定——以 <code>_</code> 开头的组件为模版组件：</p>\n<pre class="language-autoit"><code class="language-autoit">site<span class="token operator">/</span>\n├── _layout<span class="token punctuation">.</span>tsx\n├── _sidebar<span class="token punctuation">.</span>tsx\n├── hello<span class="token punctuation">.</span>tsx\n└── pagic<span class="token punctuation">.</span>config<span class="token punctuation">.</span>ts\n</code></pre>\n<p>在上面的例子中，<code>hello.tsx</code> 会被构建为 <code>dist/hello.html</code>，而 <code>_sidebar.tsx</code> 由于是 <code>_</code> 开头，所以不会被构建为页面。这样就可以实现对 <code>_layout.tsx</code> 的拆分，将 <code>Sidebar</code> 组件拆分到 <code>_sidebar.tsx</code> 文件中，然后在 <code>_layout.tsx</code> 中引用即可：</p>\n<pre class="language-tsx"><code class="language-tsx"><span class="token comment">// @deno-types="<a class="token url-link" href="https://deno.land/x/pagic@v0.8.6/src/types/react/v16.13.1/react.d.ts">https://deno.land/x/pagic@v0.8.6/src/types/react/v16.13.1/react.d.ts</a>"</span>\n<span class="token keyword">import</span> <span class="token maybe-class-name">React</span> <span class="token keyword">from</span> <span class="token string">\'<a class="token url-link" href="https://dev.jspm.io/react@16.13.1">https://dev.jspm.io/react@16.13.1</a>\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token maybe-class-name">PagicLayout</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'<a class="token url-link" href="https://deno.land/x/pagic@v0.8.6/mod.ts">https://deno.land/x/pagic@v0.8.6/mod.ts</a>\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> <span class="token maybe-class-name">Sidebar</span> <span class="token keyword">from</span> <span class="token string">\'./_sidebar.tsx\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token maybe-class-name">Layout</span><span class="token operator">:</span> <span class="token function-variable function"><span class="token maybe-class-name">PagicLayout</span></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> title<span class="token punctuation">,</span> content <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">(</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>title<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charSet</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Sidebar</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">\n      </span><span class="token punctuation">{</span>content<span class="token punctuation">}</span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token plain-text">\n  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token maybe-class-name">Layout</span><span class="token punctuation">;</span>\n</code></pre>\n<h2 id="%E6%96%87%E4%BB%B6%E5%90%8D%E7%BA%A6%E5%AE%9A">文件名约定<a class="anchor" href="#%E6%96%87%E4%BB%B6%E5%90%8D%E7%BA%A6%E5%AE%9A">§</a></h2>\n<p>除了模版文件（<code>_layout.tsx</code>）和页面文件（<code>md/tsx</code>）之外的其他文件会被视为静态资源，直接复制到 <code>dist</code> 目录下。</p>\n<p>现将所有文件名约定汇总如下：</p>\n<table>\n<thead>\n<tr>\n<th>文件名</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>以 <code>.</code> 开头</td>\n<td>隐藏文件，会被忽略</td>\n</tr>\n<tr>\n<td><code>pagic.config.ts</code> 或 <code>pagic.config.tsx</code></td>\n<td>配置文件</td>\n</tr>\n<tr>\n<td><code>_layout.tsx</code></td>\n<td>模版文件</td>\n</tr>\n<tr>\n<td>以 <code>_</code> 开头的 <code>tsx</code> 文件</td>\n<td>模版组件</td>\n</tr>\n<tr>\n<td>以 <code>md</code> 或 <code>tsx</code> 结尾</td>\n<td>页面文件</td>\n</tr>\n<tr>\n<td>其他文件</td>\n<td>静态资源，会被直接复制到 <code>dist</code> 目录下</td>\n</tr>\n</tbody>\n</table>'
        } }),
    'script': React.createElement(React.Fragment, null,
        React.createElement("script", { crossOrigin: "anonymous", src: "https://unpkg.com/react@16.13.1/umd/react.production.min.js" }),
        React.createElement("script", { crossOrigin: "anonymous", src: "https://unpkg.com/react-dom@16.13.1/umd/react-dom.production.min.js" }),
        React.createElement("script", { src: "/index.js", type: "module" })),
    'toc': React.createElement("aside", { dangerouslySetInnerHTML: {
            __html: '<nav class="toc"><ol><li><a href="#%E4%BB%80%E4%B9%88%E6%98%AF-_layout.tsx">什么是 _layout.tsx</a></li><li><a href="#%E5%AD%90%E9%A1%B5%E9%9D%A2%E5%92%8C%E5%AD%90%E6%A8%A1%E7%89%88">子页面和子模版</a></li><li><a href="#%E6%A8%A1%E7%89%88%E7%BB%84%E4%BB%B6">模版组件</a></li><li><a href="#%E6%96%87%E4%BB%B6%E5%90%8D%E7%BA%A6%E5%AE%9A">文件名约定</a></li></ol></nav>'
        } })
};
